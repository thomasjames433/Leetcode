class Solution {
public:
const int MOD=1e9 +7;
    int sumSubarrayMins(vector<int>& nums) {
        int n=nums.size();
        vector<int>pse(n,-1);
        
        stack<int>st;  
        st.push(0); 
        for(int i=1;i<nums.size();i++){
            while(!st.empty() && nums[st.top()]>nums[i]){
                st.pop();
            }
            if(!st.empty())
                pse[i]=st.top();
            st.push(i);
        }
        while(!st.empty())
            st.pop();  

        vector<int>nse(n,n);
        st.push(n-1); 
        for(int i=n-2;i>=0;i--){
            while(!st.empty() && nums[st.top()]>=nums[i]){
                st.pop();
            }
            if(!st.empty())
                nse[i]=st.top();
            st.push(i);
        }
        long long int count=0;
        for(int i=0;i<n;i++){
            int l=i-pse[i];
            int r=nse[i]-i;
            long long int subcount=l*r;
            count = (count + ((nums[i]%MOD) *(subcount%MOD))%MOD)%MOD;
        }
        return count;
    }
};